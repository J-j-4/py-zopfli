environment:
  global:
    # PyPI username and encrypted password
    TWINE_USERNAME: anthrotype
    TWINE_PASSWORD:
      secure: i3kDZLpYJy081xLBTe0AjA==

  matrix:

    - PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "32"
      TOXENV: "py27-whl"
      TOXPYTHON: "C:\\Python27\\python.exe"

    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.x"
      PYTHON_ARCH: "64"
      TOXENV: "py27-whl"
      TOXPYTHON: "C:\\Python27-x64\\python.exe"

    - PYTHON: "C:\\Python35"
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "32"
      TOXENV: "py35-whl"
      TOXPYTHON: "C:\\Python35\\python.exe"

    - PYTHON: "C:\\Python35-x64"
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "64"
      TOXENV: "py35-whl"
      TOXPYTHON: "C:\\Python35-x64\\python.exe"

    - PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "32"
      TOXENV: "py36-whl"
      TOXPYTHON: "C:\\Python36\\python.exe"

    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "64"
      TOXENV: "py36-whl"
      TOXPYTHON: "C:\\Python36-x64\\python.exe"

matrix:
  fast_finish: true

install:
  # Fetch submodules
  - git submodule update --init --recursive

  # Prepend Python to the PATH of this build
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade pip, setuptools and wheel
  - "python -m pip install --upgrade pip"
  - "python -m pip install --upgrade setuptools wheel"

  # Install test requirements
  - "python -m pip install tox"

build: false

test_script:
  # run the project tests
  - tox

on_failure:
  # print environment variables
  - ps: dir "env:"
  # print content of tox log files
  - ps: get-content .tox\*\log\*

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report
  - path: dist\*.whl

# Deploy wheels on tags to PyPI
on_success:
  - ps: >-
      if($env:APPVEYOR_REPO_TAG -eq 'true') {
        Write-Output ("Deploying " + $env:APPVEYOR_REPO_TAG_NAME + " to PyPI...")
        pip install --upgrade twine
        # If powershell ever sees anything on stderr it thinks it's a fail.
        # So we use cmd to redirect stderr to stdout before PS can see it.
        cmd /c 'twine upload dist\*.whl 2>&1'
      } else {
        Write-Output "Not deploying as this is not a tagged commit"
      }

deploy:
  # Deploy wheels on tags to GitHub Releases
  - provider: GitHub
    auth_token:
      secure: SdmzfxW36EvgcqeBwtNKV/uMZn8eS1JSVAIRDmnopnBtskb91d8zHtf5KRSA7fGc
    draft: false
    prerelease: false
    on:
      appveyor_repo_tag: true
